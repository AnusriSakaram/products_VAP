swagger: "2.0"
info:
  version: "1.0.0-oas3"
  title: Products
  description: 'Heirarchically arranged products informaion can be posted, viewed'
  termsOfService: 'http://localhost:3000'
  contact:
    name: Anusri
    url: 'localhost:3000'
    email: sakaram.anusri@gmail.com
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "productstore.swagger.io"
basePath: "/v2"
schemes:
- "https"
- "http"
paths:
  /product:
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        405:
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
    put:
      tags:
      - "product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        405:
          description: "Validation exception"
      security:
        - productstore_auth:
          - "write:products"
          - "read:products"
  /product/findByStatus:
    get:
      tags:
      - "product"
      summary: "Finds Products by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findproductsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
        400:
          description: "Invalid status value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByTags:
    get:
      tags:
      - "product"
      summary: "Finds products by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findproductsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
        400:
          description: "Invalid status value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
      deprecated: true
  /product/{productId}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getproductById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        400:
          description: "Invalid ID supplied"
        404:
          description: "product not found"
      security:
      - api_key: []
    post:
      tags:
      - "product"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updateproductWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the product"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the product"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteproduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "product not found"
      security:
      - productstore_auth:
      - productstore_auth:
        - "write:products"
        - "read:products"
 /Category:
      post:
      tags:
      - "category"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addcategory"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "category object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/category"
      responses:
        405:
          description: "Invalid input"
      security:
      - categorystore_auth:
        - "write:category_s"
        - "read:category_s"
    put:
      tags:
      - "category"
      summary: "Update an existing category"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Category object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/category"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Category not found"
        405:
          description: "Validation exception"
      security:
      - categorystore_auth:
        - "write:category_s"
        - "read:category_s"
  /category/findByTags:
    get:
      tags:
      - "category"
      summary: "Finds category by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findproductsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/category"
        400:
          description: "Invalid status value"
      security:
      - productstore_auth:
        - "write:category_s"
        - "read:category_s"
      deprecated: true
  /category/{categoryId}:
    get:
      tags:
      - "category"
      summary: "Find category by ID"
      description: "Returns a single category"
      operationId: "getcategoryById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/category"
        400:
          description: "Invalid ID supplied"
        404:
          description: "category not found"
      security:
      - api_key: []
    post:
      tags:
      - "category"
      summary: "Updates a category in the store with form data"
      description: ""
      operationId: "updatecategoryWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the category"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the category"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:category_s"
        - "read:category_s"
    delete:
      tags:
      - "category"
      summary: "Deletes a category"
      description: ""
      operationId: "deletecategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "categoryId"
        in: "path"
        description: "category id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Category not found"
      security:
      - productstore_auth:
        - "write:category_s"
        - "read:category_s"
 
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  product:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "product status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "product"

securityDefinitions:
  productstore_auth:
    type: "oauth2"
    authorizationUrl: "http://productstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:products: "modify products "
      read:products: "read your products"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
